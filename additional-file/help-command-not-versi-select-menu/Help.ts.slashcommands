import {
  EmbedBuilder,
  ActionRowBuilder,
  StringSelectMenuBuilder,
  StringSelectMenuOptionBuilder,
  CommandInteraction,
  ButtonBuilder,
  ButtonStyle,
  AnyComponentBuilder,
} from "discord.js";
import { readdirSync } from "fs";
import { Manager } from "../../../manager.js";
import fs from "fs";
import { Accessableby, SlashCommand } from "../../../@types/Command.js";
import { join, dirname } from "path";
import { fileURLToPath } from "url";
const __dirname = dirname(fileURLToPath(import.meta.url));

export default class implements SlashCommand {
  name = ["help"];
  description = "Displays all commands that the bot has.";
  category = "Info";
  lavalink = false;
  accessableby = Accessableby.Member;
  options = [];

  async run(
    interaction: CommandInteraction,
    client: Manager,
    language: string
  ) {
    await interaction.deferReply({ ephemeral: false });

    const category = readdirSync(join(__dirname, "..", "..", "slash"));

    const categoryEmbed = new EmbedBuilder()
      .setAuthor({
        name: `${interaction.guild!.members.me!.displayName} Help Menu!`,
        url: client.config.bot.SERVER_SUPPORT,
        iconURL: client.user!.displayAvatarURL() as string,
      })
      .setTitle(`${client.i18n.get(language, "help", "homepage_title")}`)
      .setThumbnail(client.user!.displayAvatarURL({ size: 2048 }))
      .setColor(client.color)
      .setFooter({
        text: `Use ${client.prefix}help <command> for more info on a command`,
      });

    const emojis = {
      Info: client.config.Emoji.E_INFO,
      Music: client.config.Emoji.E_MUSIC,
      Filter: client.config.Emoji.E_FILTER,
      Playlist: client.config.Emoji.E_PLAYLIST,
      Utils: client.config.Emoji.E_UTILS,
      Settings: client.config.Emoji.E_SETTING,
      Dev: client.config.Emoji.E_DEV,
      default: "‚ùì",
    };
    const categoriesInOrder = [
      "Info",
      "Music",
      "Filter",
      "Playlist",
      "Utils",
      "Settings",
      "Dev",
    ];
    const categorySections = categoriesInOrder.map((category: string) => {
      if (category === "Admin") return null;

      const commandsInCategory = client.commands.filter(
        (cmd) => cmd.category === category
      );

      const categoryEmoji =
        emojis[category as keyof typeof emojis] || emojis.default;
      const commandsList = commandsInCategory
        .map((cmd) => `\`${cmd.name}\``)
        .join(", ");

      return `${categoryEmoji} **${category.toUpperCase()}**\n${
        commandsList || "No commands in this category"
      }`;
    });

    categoryEmbed.setDescription(categorySections.filter(Boolean).join("\n\n"));

    const helpbutton = new ActionRowBuilder<ButtonBuilder>()
      .addComponents(
        new ButtonBuilder()
          .setLabel("Invite")
          .setEmoji(client.config.Emoji.E_INVITE || "üì®")
          .setStyle(ButtonStyle.Link)
          .setURL(client.config.bot.INVITE_URL)
      )
      .addComponents(
        new ButtonBuilder()
          .setLabel("Support")
          .setEmoji(client.config.Emoji.E_SUPPORT || "üí¨")
          .setStyle(ButtonStyle.Link)
          .setURL(client.config.bot.SERVER_SUPPORT)
      )
      .addComponents(
        new ButtonBuilder()
          .setLabel("Vote")
          .setEmoji(client.config.Emoji.E_VOTE || "üëç")
          .setStyle(ButtonStyle.Link)
          .setURL(client.config.bot.VOTE_URL)
      )
      .addComponents(
        new ButtonBuilder()
          .setLabel("Sponsor")
          .setEmoji(client.config.Emoji.E_DONATE || "üí∞")
          .setStyle(ButtonStyle.Link)
          .setURL(client.config.bot.DONATE_URL)
      );

    return interaction.editReply({
      embeds: [categoryEmbed],
      components: [helpbutton],
    });
  }
}
